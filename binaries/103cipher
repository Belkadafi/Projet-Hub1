#!/usr/bin/python3
# -*- coding: utf-8 -*-
import sys
import math

def print_my_key(key) :
    a = len(key)
    i = 0
    j = 0
    print("Key matrix:")
    while (i < a) :
        while (j < a) :
            if (j + 1 == a) :
                print(key[i][j])
            else :
                print("%d\t" % key[i][j], end='')
            j += 1
        j = 0
        i += 1

def print_my_res(result, key) :
    a = len(result)
    b = len(key)
    i = 0
    j = 0
    print("Encrypted message:")
    while (i < a) :
        while (j < b) :
            if (i == a - 1 and j == b - 1) :
                print("%d\n" % result[i][j], end='')
            else :
                print("%d " % result[i][j], end='')
            j += 1
        j = 0
        i += 1

def decryptor(argv1, argv2) :
    print("jilhjklb")

def mult(key, matrix, dimensions) :
    i = 0
    j = 0
    k = 0
    tempo = 0
    result = []
    while (k < len(matrix)) :
        result.append([])
        j = 0
        while (j < len(key)) :
            i = 0
            tempo = 0
            while (i < len(key)) :
                tempo = tempo + key[i][j] * matrix[k][i]
                i += 1
            result[k].append(tempo)
            j += 1
        k += 1
    print('')
    print_my_res(result, key)

def encrypter(argv1, argv2) :
    a = 0
    i = 0
    j = 0
    b = 0
    dimensions = int(math.sqrt(len(argv2))) + 1
    if (len(argv2) == 1 or len(argv2) == 4 or len(argv2) == 9 or len(argv2) == 16 or len(argv2) == 25) :
        dimensions -= 1
    key = [[]]
    matrix = [[]]

    for a in argv2 :
        if (i < dimensions) :
            key[j].append(ord(a))
            i += 1
        else :
            key.append([])
            i = 1
            j += 1
            key[j].append(ord(a))
    while (len(key[j]) < dimensions) :
        key[j].append(0)
    i = 0
    j = 0
    for b in argv1 :
        if (i < dimensions) :
            matrix[j].append(ord(b))
            i += 1
        else :
            matrix.append([])
            i = 1
            j += 1
            matrix[j].append(ord(b))
    if (len(key) < dimensions) :
        key.append([])
    while (len(key[dimensions - 1]) < dimensions) :
        key[dimensions - 1].append(0)
    while (len(matrix[j]) < dimensions) :
        matrix[j].append(0)
    print_my_key(key)
    mult(key, matrix, dimensions)

if __name__=='__main__':
    a = len(sys.argv)
    if (a == 2 and sys.argv[1] == "-h") :
        print("USAGE\n\
    ./103cipher message key flag\n\n\
DESCRIPTION\n\
    message\ta message, made of ASCII characters\n\
    key\t\tthe encryption key, made of ASCII characters\n\
    flag\t0 for the message to be encrypted, 1 to be decrypted")
        sys.exit (0)
    if (a == 4) :
        if (sys.argv[3] != '0' and sys.argv[3] != '1') :
            sys.exit(84)
        elif (sys.argv[3] == '0') :
            encrypter(sys.argv[1], sys.argv[2])
        elif (sys.argv[3] == '1') :
            decryptor(sys.argv[1], sys.argv[2])
    else :
        sys.exit(84)